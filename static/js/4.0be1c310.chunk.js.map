{"version":3,"sources":["componets/Natification/transitions/NatificationTransition.module.css","componets/Natification/Natification.module.css","componets/Logo/Logo.module.css","componets/Logo/transitions/Logo.module.css","componets/ContactForm/ContactForm.module.css","componets/Filter/Filter.module.css","componets/ContactListItem/ContactListItem.module.css","componets/ContactList/ContactList.module.css","componets/ContactList/transitions/ContactLsTransition.module.css","componets/Natification/Natification.js","helpers/constants.js","componets/Logo/Logo.js","componets/ContactForm/ContactForm.js","redux/Contact/contactsOperations.js","componets/Filter/Filter.js","componets/ContactListItem/ContactListItem.js","componets/ContactList/ContactList.js","componets/views/PhoneBookView.js"],"names":["module","exports","connect","state","overlap","contactsSelectors","getOverlap","CSSTransition","in","timeout","classNames","NotificationtTansition","unmountOnExit","className","s","notification","notificationText","INITIAL_STATE_FORM","name","number","Logo","phoneBook_item","ContactForm","handleInputChange","target","value","setState","handleSubmit","e","props","contacts","onAddContacts","overlapToggle","preventDefault","some","reset","this","phoneBook_form","appear","LogoSlide","onSubmit","phoneBook_lb","phoneBook_inp","type","onChange","Button","buttonPhonBk","Component","mDTP","dispatch","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","getContacts","onChangeFilter","filter","phone_filter","phone_filterInp","TaskListItem","theme","onRemove","list_PhoneLs","style","color","styleConxt","fontColor","background","bodybg","taskListItem_name","taskListItem_number","buttonPhoneLs","onClick","id","item","getContactById","getTheme","removeContactRequest","delete","removeContactSuccess","removeContactError","onRemoveContacts","defaultProps","getVisibleTasks","Contact_list","TransitionGroup","component","map","key","transition","ContactListItem","TaskerView","fetchContacts","onOverlap","setTimeout","showContacts","length","error","message","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getError"],"mappings":"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","file":"static/js/4.0be1c310.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"NatificationTransition_enter__1Xe9E\",\"enterActive\":\"NatificationTransition_enterActive__2FjfF\",\"exit\":\"NatificationTransition_exit__15yQg\",\"exitActive\":\"NatificationTransition_exitActive__rBjRm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Natification_notification__1GJ_4\",\"notificationText\":\"Natification_notificationText__dWS9X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBook_item\":\"Logo_phoneBook_item__IsrEe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"Logo_appear__2IwbH\",\"appearActive\":\"Logo_appearActive__wn73o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBook_form\":\"ContactForm_phoneBook_form__12-Og\",\"buttonPhonBk\":\"ContactForm_buttonPhonBk__13g3-\",\"phoneBook_inp\":\"ContactForm_phoneBook_inp__16QQ_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phone_filter\":\"Filter_phone_filter__5ngji\",\"phone_filterInp\":\"Filter_phone_filterInp__cFKhi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list_PhoneLs\":\"ContactListItem_list_PhoneLs__3S0Av\",\"buttonPhoneLs\":\"ContactListItem_buttonPhoneLs__2twPS\",\"taskListItem_name\":\"ContactListItem_taskListItem_name__2Clh5\",\"taskListItem_number\":\"ContactListItem_taskListItem_number__1eafx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact_list\":\"ContactList_Contact_list__2r1M3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactLsTransition_enter__U9J3o\",\"enterActive\":\"ContactLsTransition_enterActive__1naQ-\",\"exit\":\"ContactLsTransition_exit__PAUmP\",\"exitActive\":\"ContactLsTransition_exitActive__YYVB8\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport contactsSelectors from '../../redux/Contact/contactsSelectors';\r\n\r\nimport NotificationtTansition from './transitions/NatificationTransition.module.css';\r\n\r\nimport s from './Natification.module.css';\r\n\r\nconst Notification = ({ overlap }) => (\r\n  <CSSTransition\r\n    in={overlap}\r\n    timeout={200}\r\n    classNames={NotificationtTansition}\r\n    unmountOnExit\r\n  >\r\n    <div className={s.notification}>\r\n      <span className={s.notificationText}>Contact already exist!</span>\r\n    </div>\r\n  </CSSTransition>\r\n);\r\n\r\nconst mSTP = state => ({\r\n  overlap: contactsSelectors.getOverlap(state),\r\n});\r\n\r\nexport default connect(mSTP, null)(Notification);\r\n","const INITIAL_STATE_FORM = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nexport { INITIAL_STATE_FORM };\r\n","import React from 'react';\r\n\r\nimport s from './Logo.module.css';\r\n\r\nconst Logo = () => (\r\n  <div>\r\n    <h1 className={s.phoneBook_item}>Phonebook</h1>\r\n  </div>\r\n);\r\n\r\nexport default Logo;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { INITIAL_STATE_FORM } from '../../helpers/constants';\r\n\r\nimport { onAddContacts } from '../../redux/Contact/contactsOperations';\r\nimport { overlapToggle } from '../../redux/Contact/contactActions';\r\nimport contactsSelectors from '../../redux/Contact/contactsSelectors';\r\n\r\nimport Logo from '../Logo/Logo';\r\nimport LogoSlide from '../Logo/transitions/Logo.module.css';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    ...INITIAL_STATE_FORM,\r\n  };\r\n\r\n  handleInputChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    const { contacts, onAddContacts, overlapToggle } = this.props;\r\n    const { name } = this.state;\r\n    e.preventDefault();\r\n\r\n    const overlap = contacts.some(contacts => contacts.name === name);\r\n    if (!overlap) {\r\n      this.reset();\r\n      return onAddContacts({ ...this.state });\r\n    } else overlapToggle(overlap);\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...INITIAL_STATE_FORM });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <div className={s.phoneBook_form}>\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={500}\r\n          classNames={LogoSlide}\r\n        >\r\n          <Logo />\r\n        </CSSTransition>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label className={s.phoneBook_lb}>\r\n            Name\r\n            <input\r\n              className={s.phoneBook_inp}\r\n              type=\"text\"\r\n              value={name}\r\n              name=\"name\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n          <label className={s.phoneBook_lb}>\r\n            Number\r\n            <input\r\n              className={s.phoneBook_inp}\r\n              type=\"tel\"\r\n              value={number}\r\n              name=\"number\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n          <Button type=\"submit\" className={s.buttonPhonBk}>\r\n            Add contact\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mDTP = { onAddContacts, overlapToggle };\r\nconst mSTP = state => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nexport default connect(mSTP, mDTP)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  onRemove: PropTypes.func,\r\n};\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n} from './contactActions';\r\n\r\nconst onFetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst onAddContacts = ({ name, number }) => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', { name, number });\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst onRemoveContacts = id => async dispatch => {\r\n  dispatch(removeContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(removeContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(removeContactError(error));\r\n  }\r\n};\r\n\r\nexport { onFetchContacts, onAddContacts, onRemoveContacts };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { onChangeFilter } from '../../redux/Contact/contactActions';\r\n\r\nimport contactsSelectors from '../../redux/Contact/contactsSelectors';\r\n\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <div className={s.phone_filter}>\r\n    <h3>Find my contacts</h3>\r\n    <input\r\n      type=\"text\"\r\n      className={s.phone_filterInp}\r\n      value={filter}\r\n      onChange={e => onChange(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst mSTP = state => ({\r\n  value: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mDTP = {\r\n  onChange: onChangeFilter,\r\n};\r\n\r\nexport default connect(mSTP, mDTP)(Filter);\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { onRemoveContacts } from '../../redux/Contact/contactsOperations';\r\n\r\nimport contactsSelectors from '../../redux/Contact/contactsSelectors';\r\n\r\nimport styleConxt from '../../contex/ThemeContext';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport s from './ContactListItem.module.css';\r\n\r\nconst TaskListItem = ({ theme, name, number, onRemove }) => (\r\n  <li\r\n    className={s.list_PhoneLs}\r\n    style={{\r\n      color: styleConxt[theme].fontColor,\r\n      background: styleConxt[theme].bodybg,\r\n    }}\r\n  >\r\n    <p>\r\n      <span className={s.taskListItem_name}>{name}</span> :{' '}\r\n      <span className={s.taskListItem_number}>{number}</span>\r\n    </p>\r\n\r\n    <Button type=\"button\" className={s.buttonPhoneLs} onClick={onRemove}>\r\n      Delete\r\n    </Button>\r\n  </li>\r\n);\r\n\r\nconst mSTP = (state, { id }) => {\r\n  const item = contactsSelectors.getContactById(state, id);\r\n  const theme = contactsSelectors.getTheme(state);\r\n\r\n  return { theme, ...item };\r\n};\r\n\r\nconst mDTP = (dispatch, { id }) => ({\r\n  onRemove: () => dispatch(onRemoveContacts(id)),\r\n});\r\n\r\nexport default connect(mSTP, mDTP)(TaskListItem);\r\n\r\nTaskListItem.defaultProps = {\r\n  contacts: [],\r\n};\r\n\r\nTaskListItem.propTypes = {\r\n  onRemove: PropTypes.func,\r\n  theme: PropTypes.string.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport contactsSelectors from '../../redux/Contact/contactsSelectors';\r\n\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\n\r\nimport styleConxt from '../../contex/ThemeContext';\r\n\r\nimport s from './ContactList.module.css';\r\nimport transition from '../ContactList/transitions/ContactLsTransition.module.css';\r\n\r\nconst ContactList = ({ contacts, theme }) => (\r\n  <div\r\n    className={s.Contact_list}\r\n    style={{\r\n      color: styleConxt[theme].fontColor,\r\n      background: styleConxt[theme].bodybg,\r\n    }}\r\n  >\r\n    <h2>Contacts</h2>\r\n    <TransitionGroup component=\"ul\">\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} timeout={200} classNames={transition}>\r\n          <ContactListItem key={id} id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  </div>\r\n);\r\n\r\nconst mSTP = state => {\r\n  return {\r\n    contacts: contactsSelectors.getVisibleTasks(state),\r\n    theme: contactsSelectors.getTheme(state),\r\n  };\r\n};\r\n\r\nexport default connect(mSTP, null)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.node,\r\n    }),\r\n  ).isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { onFetchContacts } from '../../redux/Contact/contactsOperations';\r\nimport { overlapToggle } from '../../redux/Contact/contactActions';\r\n\r\nimport { contactsSelectors } from '../../redux/Contact/index';\r\n\r\nimport Notification from '../Natification/Natification';\r\nimport ContactListForm from '../ContactForm/ContactForm';\r\nimport Filter from '../Filter/Filter';\r\nimport ContactList from '../ContactList/ContactList';\r\n\r\nclass TaskerView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { overlap, onOverlap } = this.props;\r\n    if (overlap) {\r\n      setTimeout(() => {\r\n        onOverlap(overlap);\r\n      }, 1500);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const showContacts = this.props.contacts.length;\r\n    const { error } = this.props;\r\n    return (\r\n      <>\r\n        <Notification />\r\n        {error && <h1>Sorry:{error.message}</h1>}\r\n        <ContactListForm />\r\n        {showContacts > 1 && <Filter />}\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mDTP = { fetchContacts: onFetchContacts, onOverlap: overlapToggle };\r\nconst mSTP = state => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n  error: contactsSelectors.getError(state),\r\n  overlap: contactsSelectors.getOverlap(state),\r\n});\r\n\r\nexport default connect(mSTP, mDTP)(TaskerView);\r\n"],"sourceRoot":""}